#!/usr/bin/env perl
use strict;
use lib "/home/hosting_locumtest/usr/local/lib/perl5";
use Mojolicious::Lite;
use DBI;
use utf8;

open (DBCONF,"< db.conf") || die "Error open dbconfig file";
my @dbconf=<DBCONF>;
close DBCONF;
chomp @dbconf;
our $dbh = DBI->connect($dbconf[0],$dbconf[1],$dbconf[2],
			{ PrintError => 0, RaiseError => 1 });
$dbh->{'mysql_enable_utf8'} = 1;
$dbh->do('SET NAMES utf8');

app->hook(before_dispatch => sub {
               my $self = shift;
               $self->req->url->base(Mojo::URL->new(q{http://www.storesto.ru/}))
	       }
	  );

get '/' => sub{
    my $self=shift;
    $self->render(text=>'Hello storesto! Coming soon! Invites here: team@storesto.ru');
};

get '/kitchen'=>sub{
  my $self=shift;
  my $recipes=$dbh->selectall_hashref('SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES','ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0);
  $self->render('kitchen');
};

get '/kitchen/:action/:id'=>sub{
  my $self=shift;
  my $action=$self->param('action');
  my $recipeid=$self->param('id');
  if($action eq 'delete'){
    $dbh->do("DELETE FROM RECIPES WHERE RECIPES.ID=$recipeid");
  }
  my $recipes=$dbh->selectall_hashref('SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES','ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0);
  $self->render('kitchen');
};

post '/kitchen'=>sub{
  my $self=shift;
  my @recipeid=$self->param('recipeid');
  my $SQL='';
  foreach(@recipeid){
    $SQL=$SQL."RECIPES.ID=$_ OR ";
  }
  my $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE $SQL RECIPES.ID=0",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0,
	       addrecipes=>{});
  $self->render('menu');
};

get '/icebox'=>sub{
  my $self=shift;
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,TAGS.NAME AS TAG FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER2 ON INGREDIENTS.ID=ROUTER2.INGREDIENTID LEFT JOIN TAGS ON ROUTER2.TAGID=TAGS.ID",'ID');
  $self->stash(ingredients=>$ingredients,
	       ingredient=>'',
	       ingredientid=>'',
	       tag=>'');
  $self->render('icebox');
};

get '/icebox/:action/:id'=>sub{
  my $self=shift;
  my $action=$self->param('action');
  my $ingredientid=$self->param('id');
  my $ingredient='';
  my $tag='';
  if($action eq 'delete'){
    $dbh->do("DELETE FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid");
    $ingredientid=0;
  }elsif($action eq 'edit'){
    $ingredient=$dbh->selectrow_array("SELECT INGREDIENTS.NAME FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid");
    $tag=$dbh->selectrow_array("SELECT TAGS.NAME FROM ROUTER2 LEFT JOIN TAGS ON ROUTER2.TAGID=TAGS.ID WHERE ROUTER2.INGREDIENTID=$ingredientid");
  }
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,TAGS.NAME AS TAG FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER2 ON INGREDIENTS.ID=ROUTER2.INGREDIENTID LEFT JOIN TAGS ON ROUTER2.TAGID=TAGS.ID",'ID');
  $self->stash(ingredients=>$ingredients,
	       ingredient=>$ingredient,
	       ingredientid=>$ingredientid,
	       tag=>$tag);
  $self->render('icebox');
};

post '/icebox'=>sub{
  my $self=shift;
  my $ingredient=$self->param('ingredient');
  my $measure=$self->param('measure');
  my $tag=$self->param('tag');
  my $ingredientid=$self->param('ingredientid');
  my $tagid=0;
  if($ingredient && $measure && $tag && !$ingredientid){
    $dbh->do("INSERT INTO INGREDIENTS(ID,NAME,MEASUREID) VALUES(NULL,\"$ingredient\",$measure)");
    $ingredientid=$dbh->last_insert_id('','','INGREDIENTS','ID');
    $tagid=$dbh->selectrow_array("SELECT ID FROM TAGS WHERE TAGS.NAME=\"$tag\"");
    if(!$tagid){
      $dbh->do("INSERT INTO TAGS(ID,NAME) VALUES(NULL,\"$tag\")");
      $tagid=$dbh->last_insert_id('','','TAGS','ID');
    }
    $dbh->do("INSERT INTO ROUTER2(ID,INGREDIENTID,TAGID) VALUES(NULL,$ingredientid,$tagid)");
  }elsif($ingredient && $measure && $tag && $ingredientid){#Upgrade ingredient and tag
    $dbh->do("UPDATE INGREDIENTS SET INGREDIENTS.NAME=\"$ingredient\",INGREDIENTS.MEASUREID=$measure WHERE INGREDIENTS.ID=$ingredientid");
  }
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,TAGS.NAME AS TAG FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER2 ON INGREDIENTS.ID=ROUTER2.INGREDIENTID LEFT JOIN TAGS ON ROUTER2.TAGID=TAGS.ID",'ID');
  $self->stash(ingredients=>$ingredients,
	       ingredient=>$ingredient,
	       ingredientid=>'',
	       tag=>$tag);
  $self->render('icebox');
};

get '/recipe'=>sub{
  my $self=shift;
  my $tags=$dbh->selectall_hashref('SELECT TAGS.ID,TAGS.NAME FROM TAGS RIGHT JOIN ROUTER2 ON TAGS.ID=ROUTER2.TAGID','ID');
  $self->stash(tags=>$tags,
	       ingredients=>{},
	       recipe=>'',
	       recipeid=>undef,
	       addingredients=>{});
  $self->render('recipe');
};

get '/recipe/:action/:id/:routerid'=>{routerid=>0}=>sub{
  my $self=shift;
  my $action=$self->param('action');
  my $recipeid=$self->param('id');
  my $routerid=$self->param('routerid');
  my $addingredient=$self->param('addingredient') || undef;
  my $addingredients={};
  if($action eq 'cut'){
    $dbh->do("DELETE FROM ROUTER1 WHERE ROUTER1.ID=$routerid");
  }elsif($action eq 'add' && $addingredient){
    $addingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER2 ON INGREDIENTS.ID=ROUTER2.INGREDIENTID WHERE INGREDIENTS.NAME LIKE '%$addingredient%'",'ID');
  }
  my $recipe=$dbh->selectrow_array("SELECT RECIPES.NAME FROM RECIPES WHERE RECIPES.ID=$recipeid");
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,ROUTER1.ID AS ROUTEID,ROUTER1.RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid",'ID');
  $self->stash(tags=>{},
	       ingredients=>$ingredients,
	       recipe=>$recipe,
	       recipeid=>$recipeid,
	       addingredients=>$addingredients);
  $self->render('recipe');
};

post '/recipe'=>sub{
  my $self=shift;
  my $recipe=$self->param('recipe');
  my $recipeid=$self->param('recipeid') || 0;
  my $tags={};
  my $ingredients={};
  my $SQL='';
  my @quantity=$self->param('quantity');
  my $quantity_hook=0;
  foreach(@quantity){#Hook for defined quantity
    if($_ && $_>0){
      $quantity_hook=1;
    }
  }
  my @ingredientid=$self->param('ingredientid');
  	  #$self->stash(sql=>$SQL,n=>$n);Test
  my @tagid=$self->param('tagid');
  foreach(@tagid){
    $SQL=$SQL." ROUTER2.TAGID=$_ OR "
  }
	  #$self->stash(sql=>$SQL,q=>$quantity_hook);#Test
  if(@tagid){#Select ingredients for recipe
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER2 ON INGREDIENTS.ID=ROUTER2.INGREDIENTID WHERE $SQL ROUTER2.TAGID=0",'ID');
  }elsif($quantity_hook && $recipe && !$recipeid){#Create recipe,router1 if quantity>0
    $dbh->do("INSERT INTO RECIPES(ID,NAME) VALUES(NULL,\"$recipe\")");
    $recipeid=$dbh->last_insert_id('','','RECIPES','ID');
    for(my $n=0;$n<@ingredientid;$n++){#Create SQL INSERT query for ROUTER1
      if($quantity[$n] && $quantity[$n]!=0){
        $SQL=$SQL."(NULL,$recipeid,$ingredientid[$n],$quantity[$n]),"
      }
    }chop $SQL;#Drop last character ','
	  #$self->stash(sql=>$SQL);#Test
    $dbh->do("INSERT INTO ROUTER1(ID,RECIPEID,INGREDIENTID,QUANTITY) VALUES $SQL");
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid",'ID');
  }elsif($quantity_hook && $recipeid && $recipe){#Update recipe, router1
    $dbh->do("UPDATE RECIPES SET NAME=\"$recipe\" WHERE ID=$recipeid");
    for(my $n=0;$n<@ingredientid;$n++){#Create SQL INSERT query for ROUTER1
      if($quantity[$n] && $quantity[$n]!=0){
	#Hook for checking true UPDATE
	my $status=$dbh->do("UPDATE ROUTER1 SET QUANTITY=$quantity[$n] WHERE RECIPEID=$recipeid AND INGREDIENTID=$ingredientid[$n]") || die $dbh->errstr;
	if($status!=1){
	  $dbh->do("INSERT INTO ROUTER1(ID,RECIPEID,INGREDIENTID,QUANTITY) VALUES(NULL,$recipeid,$ingredientid[$n],$quantity[$n])");
	}
      }
    }
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid",'ID');
  }else{#If new recipe,select ingredients tags
    $tags=$dbh->selectall_hashref('SELECT TAGS.ID,TAGS.NAME FROM TAGS RIGHT JOIN ROUTER2 ON TAGS.ID=ROUTER2.TAGID','ID');
  }
  $self->stash(recipe=>$recipe,
	       recipeid=>$recipeid,
	       ingredients=>$ingredients,
	       tags=>$tags,
	       addingredients=>{});
  $self->render('recipe');
};

get '/menu/:action/:id/:routeid'=>{routeid=>0}=>sub{
  my $self=shift;
  my $action=$self->param('action');
  my $menuid=$self->param('id');
  my $routeid=$self->param('routeid');
  my $addrecipe=$self->param('addrecipe');
  my $addrecipes={};
  my $menu='';
  my $recipes={};
  if($action eq 'edit'){    
  }elsif($action eq 'cut'){#Cutting recipes from menu
    $dbh->do("DELETE FROM ROUTER3 WHERE ROUTER3.ID=$routeid");
  }elsif($action eq 'add'){
    $addrecipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE RECIPES.NAME LIKE '%$addrecipe%'",'ID');
  }
  $menu=$dbh->selectrow_array("SELECT MENU.NAME FROM MENU WHERE MENU.ID=$menuid");
  $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>$menu,
	       menuid=>$menuid,
	       addrecipes=>$addrecipes);
  $self->render('menu');
};

post '/menu'=>sub{
  my $self=shift;
  my $menu=$self->param('menu');
  my $menuid=$self->param('menuid');
  my @recipeid=$self->param('recipeid');
  my @amount=$self->param('amount');
  my $recipes={};
  my $SQL='';
  my $amount_hook=0;
  foreach(@amount){#Hook for defined amount
    if($_ && $_>0){
      $amount_hook=1;
    }
  }
  if($amount_hook && $menu && !$menuid){#Create menu,router3 if quantity>0
    $dbh->do("INSERT INTO MENU(ID,NAME) VALUES(NULL,\"$menu\")");
    $menuid=$dbh->last_insert_id('','','MENU','ID');
    for(my $n=0;$n<@recipeid;$n++){#Create SQL INSERT query for ROUTER3
      if($amount[$n] && $amount[$n]!=0){
        $SQL=$SQL."(NULL,$menuid,$recipeid[$n],$amount[$n]),"
    }
  }chop $SQL;#Drop last character ','
	  #$self->stash(sql=>$SQL);#Test
    $dbh->do("INSERT INTO ROUTER3(ID,MENUID,RECIPEID,AMOUNT) VALUES $SQL");
    $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid",'ID');
  }elsif($amount_hook && $menuid && $menu){#Update menu, router3
    $dbh->do("UPDATE MENU SET NAME=\"$menu\" WHERE ID=$menuid");
    for(my $n=0;$n<@recipeid;$n++){#Create SQL UPDATE query for ROUTER3
      if($amount[$n] && $amount[$n]!=0){
	my $status=$dbh->do("UPDATE ROUTER3 SET AMOUNT=$amount[$n] WHERE RECIPEID=$recipeid[$n] AND MENUID=$menuid");
	if($status!=1){
	  $dbh->do("INSERT INTO ROUTER3(ID,MENUID,RECIPEID,AMOUNT) VALUES(NULL,$menuid,$recipeid[$n],$amount[$n])");
	}
      }
    }
    $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid",'ID');
  }else{#If new menu,select recipes
    foreach(@recipeid){
    $SQL=$SQL."RECIPES.ID=$_ OR ";
    }
    $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE $SQL RECIPES.ID=0",'ID');
  }
  $self->stash(recipes=>$recipes,
	       menu=>$menu,
	       menuid=>$menuid,
	       addrecipes=>{});
  $self->render('menu');
};

get '/cafe'=>sub{
  my $self=shift;
  my $menus=$dbh->selectall_hashref('SELECT MENU.ID,MENU.NAME AS MENU FROM MENU','ID');
  $self->stash(menus=>$menus,
	       ingredients=>{});
  $self->render('cafe');
};

get '/cafe/:action/:id'=>sub{
  my $self=shift;
  my $action=$self->param('action');
  my $menuid=$self->param('id');
  my $ingredients={};
  if($action eq 'delete'){
    $dbh->do("DELETE FROM MENU WHERE ID=$menuid");
  }elsif($action eq 'buy'){
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID, INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,SUM(ROUTER3.AMOUNT*ROUTER1.QUANTITY) AS SUM FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid GROUP BY INGREDIENTS.ID",'ID');
  }
  my $menus=$dbh->selectall_hashref('SELECT MENU.ID,MENU.NAME AS MENU FROM MENU','ID');
  $self->stash(menus=>$menus,
	       ingredients=>$ingredients);
  $self->render('cafe');
};

app->secret('storestosecret');
app->start;
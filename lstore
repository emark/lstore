#!/usr/bin/env perl
use strict;
use lib "/home/hosting_locumtest/usr/local/lib/perl5";
use Mojolicious::Lite;
use Validator::Custom;
use DBI;
use utf8;
plugin 'mail';

open (DBCONF,"< db.conf") || die "Error open dbconfig file";
my @dbconf=<DBCONF>;
close DBCONF;
chomp @dbconf;
our $dbh = DBI->connect($dbconf[0],$dbconf[1],$dbconf[2],
			{ PrintError => 0, RaiseError => 1 });
$dbh->{'mysql_enable_utf8'} = 1;
$dbh->do('SET NAMES utf8');

app->plugin(mail => {
    from     => 'notify@storesto.ru',
    encoding => 'base64',
    how      => 'smtp',
    howargs  => ['mail.locum.ru',AuthUser=>'notify@storesto.ru',AuthPass=>'rpO8UikS1K'],
  });

my $vc=Validator::Custom->new;
my $subscribe="Служба поддержки: support\@storesto.ru\nНаш блог http://blog.storesto.ru";

app->secret('storestosecret');
app->hook(before_dispatch => sub {
               my $self = shift;
               $self->req->url->base(Mojo::URL->new(q{http://www.storesto.ru/}))
	       }
	  );

get '/kitchen'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE,ROUND(RECIPES.WEIGHT/RECIPES.CALCULATION) AS PORTION FROM RECIPES WHERE RECIPES.USERID=$uid",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0,
	       uid=>$self->session('uid'));
  $self->render('kitchen');
};

get '/kitchen/:action/:id'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $action=$self->stash('action') || '';
  my $recipeid=$self->param('id');
  if($action eq 'delete'){
    $dbh->do("DELETE FROM RECIPES WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid");
    $self->stash(message=>'Рецепт удален')
  }
  my $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID WHERE INGREDIENTS.USERID=$uid",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0);
  $self->render('kitchen');
};

post '/kitchen'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my @recipeid=$self->param('recipeid');
  my $SQL='';
  foreach(@recipeid){
    $SQL=$SQL."RECIPES.ID=$_ OR ";
  }
  my $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE ($SQL RECIPES.ID=0) AND RECIPES.USERID=$uid",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>'',
	       menuid=>0,
	       addrecipes=>{});
  $self->render('menu');
};

get '/icebox'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID AS ID,INGREDIENTS.NAME AS INGREDIENT,INGREDIENTS.TAG AS TAG,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE INGREDIENTS.USERID=$uid",'ID');
  my $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG AS TAG FROM INGREDIENTS WHERE INGREDIENTS.USERID=$uid GROUP BY TAG ORDER BY TAG");
  $self->stash(ingredients=>$ingredients,
	       ingredient=>'',
	       ingredientid=>'',
	       tag=>'',
	       tags=>$tags,
	       measure=>0,
           invalidform=>{});
  $self->render('icebox');
};

get '/icebox/tag/:tagname'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $tagname=$self->param('tagname');
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,INGREDIENTS.TAG,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE INGREDIENTS.TAG='$tagname' AND INGREDIENTS.USERID=$uid",'ID');
  my $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG AS TAG FROM INGREDIENTS WHERE INGREDIENTS.TAG='$tagname' AND INGREDIENTS.USERID=$uid GROUP BY TAG ORDER BY TAG");
  $self->stash(ingredients=>$ingredients,
	       ingredient=>'',
	       ingredientid=>'',
	       tag=>$tagname,
	       tags=>$tags,
	       measure=>0,
           invalidform=>{});
  $self->render('icebox');
};

get '/icebox/:action/:id'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $action=$self->stash('action') || '';
  my $ingredientid=$self->param('id');
  my $ingredient='';
  my $tag='';
  my $measure=0;
  if($action eq 'delete'){
    $dbh->do("DELETE FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid AND INGREDIENTS.USERID=$uid");
    $ingredientid=0;
    $self->stash(message=>'Продукт удален');
  }elsif($action eq 'edit'){
    $ingredient=$dbh->selectrow_array("SELECT INGREDIENTS.NAME FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid AND INGREDIENTS.USERID=$uid");
    $tag=$dbh->selectrow_array("SELECT INGREDIENTS.TAG FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid AND INGREDIENTS.USERID=$uid");
    $measure=$dbh->selectrow_array("SELECT INGREDIENTS.MEASUREID FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid AND INGREDIENTS.USERID=$uid");
  }
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,INGREDIENTS.TAG,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE INGREDIENTS.USERID=$uid",'ID');
  my $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG AS TAG FROM INGREDIENTS WHERE INGREDIENTS.USERID=$uid GROUP BY TAG ORDER BY TAG");
  $self->stash(ingredients=>$ingredients,
	       ingredient=>$ingredient,
	       ingredientid=>$ingredientid,
	       measure=>$measure,
	       tag=>$tag,
	       tags=>$tags,
           invalidform=>{});
  $self->render('icebox');
};

post '/icebox'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $ingredient=$self->param('ingredient');
  my $measure=$self->param('measure');
  my $tag=lc $self->param('tag');
  my $ingredientid=$self->param('ingredientid') || undef;
  my $param=$self->req->params->to_hash;
  # Validation Rule
    my $rule = [
                ingredient => {message => 'Назовите продукт. '} => ['not_blank'],
                tag => {message => 'Уточните полку. '} => ['not_blank']
                ];
    my $vresult=$vc->validate($param,$rule);
    #Validation is OK
    if($vresult->is_ok){
        if($ingredient && $measure && $tag && !$ingredientid){#Insert new ingredient on tag
            $dbh->do("INSERT INTO INGREDIENTS(ID,NAME,MEASUREID,TAG,USERID) VALUES(NULL,\"$ingredient\",$measure,\"$tag\",$uid)");
            $self->stash(message=>'Продукт сохранен',
                         invalidform=>{});
        }elsif($ingredient && $measure && $tag && $ingredientid){#Upgrade ingredient and tag
            $dbh->do("UPDATE INGREDIENTS SET INGREDIENTS.NAME=\"$ingredient\",INGREDIENTS.MEASUREID=$measure,INGREDIENTS.TAG=\"$tag\" WHERE INGREDIENTS.ID=$ingredientid AND INGREDIENTS.USERID=$uid");
            $ingredient='';#Clear form fields
            $tag='';
            $measure=0;
            $self->stash(message=>'Продукт сохранен',
                         invalidform=>{});
        }
    }else{
        $self->stash(invalidform=>$vresult->messages_to_hash) if $vresult->has_invalid;
        $self->stash(message=>'Упс, ошибочка. ');
    }   
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,INGREDIENTS.TAG FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE INGREDIENTS.USERID=$uid",'ID');
  my $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG AS TAG FROM INGREDIENTS WHERE INGREDIENTS.USERID=$uid GROUP BY TAG ORDER BY TAG");
  $self->stash(ingredients=>$ingredients,
	       ingredient=>$ingredient,
	       ingredientid=>$ingredientid,
	       tag=>$tag,
	       tags=>$tags,
	       measure=>$measure);
  $self->render('icebox');
};

get '/recipe'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $tags=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.TAG FROM INGREDIENTS WHERE INGREDIENTS.USERID=$uid GROUP BY INGREDIENTS.TAG",'ID');
  $self->stash(tags=>$tags,
	       ingredients=>{},
	       recipe=>'',
	       recipeid=>undef,
	       addingredients=>{});
  $self->render('recipe');
};

get '/recipe/view/:id'=>sub{
       my $self=shift;
       my $uid=$self->session('uid') || undef;
       my $recipeid=$self->param('id');
       my $recipe=$dbh->selectrow_arrayref("SELECT RECIPES.NAME,RECIPES.CALCULATION,RECIPES.INSTRUCTION FROM RECIPES WHERE RECIPES.ID=$recipeid");
       my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,ROUTER1.ID AS ROUTEID,ROUTER1.RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid",'ID');
       $self->stash(ingredients=>$ingredients,
	       recipe=>$recipe,
           recipeid=>$recipeid,
           uid=>$uid);
       $self->render('recipeview');
};

get '/recipe/:action/:id/:routerid'=>{routerid=>0}=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $action=$self->stash('action') || '';
  my $recipeid=$self->param('id');
  my $routerid=$self->param('routerid');
  my $addingredient=$self->param('addingredient') || undef;
  my $addingredients={};
  if($action eq 'cut'){
    $dbh->do("DELETE FROM ROUTER1 WHERE ROUTER1.ID=$routerid AND ROUTER1.RECIPEID=(SELECT RECIPES.ID FROM RECIPES WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid)");
  }elsif($action eq 'add' && $addingredient){
    $addingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE INGREDIENTS.NAME LIKE '%$addingredient%' AND INGREDIENTS.USERID=$uid",'ID');
    $self->stash(message=>'Ой, а такого продукта в кладовой нет.') if !%{$addingredients};
  }
  my $recipe=$dbh->selectrow_arrayref("SELECT RECIPES.NAME,RECIPES.WEIGHT,RECIPES.CALCULATION,RECIPES.INSTRUCTION FROM RECIPES WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid");
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,ROUTER1.ID AS ROUTEID,ROUTER1.RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid AND INGREDIENTS.USERID=$uid",'ID');
  $self->stash(tags=>{},
	       ingredients=>$ingredients,
	       recipe=>$recipe,
	       recipeid=>$recipeid,
	       addingredients=>$addingredients);
  $self->render('recipe');
};

post '/recipe'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $recipe=$self->param('recipe');
  my $recipeid=$self->param('recipeid') || 0;
  my $weight=$self->param('weight') || 0;
  my $calculation=$self->param('calculation') || 1;
  my $instruction=$self->param('instruction') || '';
  my $tags={};
  my $ingredients={};
  my $SQL='';
  my @quantity=$self->param('quantity');
  my $quantity_hook=0;
  foreach(@quantity){#Hook for defined quantity
    if($_ && $_>0){
      $quantity_hook=1;
    }
  }
  my @ingredientid=$self->param('ingredientid');
  	  #$self->stash(sql=>$SQL,n=>$n);Test
  my @tag=$self->param('tag');
  foreach(@tag){
    $SQL=$SQL." INGREDIENTS.TAG='$_' OR "
  }
	  #$self->stash(sql=>$SQL,q=>$quantity_hook);#Test
  if(@tag){#Select ingredients for recipe
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ($SQL INGREDIENTS.TAG='') AND INGREDIENTS.USERID=$uid",'ID');
  
  }elsif($quantity_hook && $recipe && !$recipeid){#Create recipe,router1 if quantity>0
    
    $dbh->do("INSERT INTO RECIPES(ID,NAME,WEIGHT,CALCULATION,INSTRUCTION,USERID) VALUES(NULL,\"$recipe\",$weight,$calculation,\"$instruction\",$uid)");
    $recipeid=$dbh->last_insert_id('','','RECIPES','ID');
    for(my $n=0;$n<@ingredientid;$n++){#Create SQL INSERT query for ROUTER1
      if($quantity[$n] && $quantity[$n]!=0){
        $SQL=$SQL."(NULL,$recipeid,$ingredientid[$n],$quantity[$n]),"
      }
    }chop $SQL;#Drop last character ','
	  #$self->stash(sql=>$SQL);#Test
    $dbh->do("INSERT INTO ROUTER1(ID,RECIPEID,INGREDIENTID,QUANTITY) VALUES $SQL");
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,ROUTER1.ID AS ROUTEID,ROUTER1.RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid AND INGREDIENTS.USERID=$uid",'ID');  }elsif($quantity_hook && $recipeid && $recipe){#Update recipe, router1
    $dbh->do("UPDATE RECIPES SET NAME=\"$recipe\",WEIGHT=$weight,CALCULATION=$calculation,INSTRUCTION=\"$instruction\" WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid");
    for(my $n=0;$n<@ingredientid;$n++){#Create SQL INSERT query for ROUTER1
      if($quantity[$n] && $quantity[$n]!=0){
	#Hook for checking true UPDATE
	my $status=$dbh->do("UPDATE ROUTER1 SET QUANTITY=$quantity[$n] WHERE RECIPEID=(SELECT RECIPES.ID FROM RECIPES WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid) AND INGREDIENTID=(SELECT INGREDIENTS.ID FROM INGREDIENTS WHERE INGREDIENTS.ID=$ingredientid[$n] AND INGREDIENTS.USERID=$uid)") || die $dbh->errstr;
	if($status!=1){
	  $dbh->do("INSERT INTO ROUTER1(ID,RECIPEID,INGREDIENTID,QUANTITY) VALUES(NULL,$recipeid,$ingredientid[$n],$quantity[$n])");
	  $self->stash(sql=>"INSERT INTO ROUTER1(ID,RECIPEID,INGREDIENTID,QUANTITY) VALUES(NULL,$recipeid,$ingredientid[$n],$quantity[$n])");#Test
	}
      }
    }
    $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,ROUTER1.ID AS ROUTEID,ROUTER1.RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,ROUTER1.QUANTITY AS QUANTITY FROM INGREDIENTS LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID LEFT JOIN ROUTER1 ON INGREDIENTS.ID=ROUTER1.INGREDIENTID WHERE ROUTER1.RECIPEID=$recipeid AND INGREDIENTS.USERID=$uid",'ID');
    $self->stash(message=>'Рецепт сохранен.');
  }else{#If new recipe,select ingredients tags
    $tags=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.TAG FROM INGREDIENTS WHERE INGREDIENTS.USERID=$uid GROUP BY INGREDIENTS.TAG",'ID');
  }
  $recipe=$dbh->selectrow_arrayref("SELECT RECIPES.NAME,RECIPES.WEIGHT,RECIPES.CALCULATION,RECIPES.INSTRUCTION FROM RECIPES WHERE RECIPES.ID=$recipeid AND RECIPES.USERID=$uid");
  $self->stash(recipe=>$recipe,
	       recipeid=>$recipeid,
	       ingredients=>$ingredients,
	       tags=>$tags,
	       addingredients=>{});
  $self->render('recipe');
};

get '/menu/:action/:id/:routeid'=>{routeid=>0}=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $action=$self->stash('action') || '';
  my $menuid=$self->param('id');
  my $routeid=$self->param('routeid');
  my $addrecipe=$self->param('addrecipe') || undef;
  my $addrecipes={};
  my $menu='';
  my $recipes={};
  if($action eq 'edit'){    
  }elsif($action eq 'cut'){#Cutting recipes from menu
    $dbh->do("DELETE FROM ROUTER3 WHERE ROUTER3.ID=$routeid AND ROUTER3.MENUID=(SELECT MENU.ID FROM MENU WHERE MENU.ID=$menuid AND MENU.USERID=$uid)");
  }elsif($action eq 'add' && $addrecipe){
    $addrecipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE RECIPES.NAME LIKE '%$addrecipe%' AND RECIPES.USERID=$uid",'ID');
  }
  $menu=$dbh->selectrow_array("SELECT MENU.NAME FROM MENU WHERE MENU.ID=$menuid AND MENU.USERID=$uid");
  $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
  $self->stash(recipes=>$recipes,
	       menu=>$menu,
	       menuid=>$menuid,
	       addrecipes=>$addrecipes);
  $self->render('menu');
};

post '/menu'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $menu=$self->param('menu');
  my $menuid=$self->param('menuid');
  my @recipeid=$self->param('recipeid');
  my @amount=$self->param('amount');
  my $recipes={};
  my $SQL='';
  my $amount_hook=0;
  foreach(@amount){#Hook for defined amount
    if($_ && $_>0){
      $amount_hook=1;
    }
  }
    if($amount_hook && $menu && !$menuid){#Create menu,router3 if quantity>0
        $dbh->do("INSERT INTO MENU(ID,NAME,USERID) VALUES(NULL,\"$menu\",$uid)");
        $menuid=$dbh->last_insert_id('','','MENU','ID');
        for(my $n=0;$n<@recipeid;$n++){#Create SQL INSERT query for ROUTER3
            if($amount[$n] && $amount[$n]!=0){
                $SQL=$SQL."(NULL,$menuid,$recipeid[$n],$amount[$n]),"
            }
        }chop $SQL;#Drop last character ','
    	#$self->stash(sql=>$SQL);#Test
        $dbh->do("INSERT INTO ROUTER3(ID,MENUID,RECIPEID,AMOUNT) VALUES $SQL");
        $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
        $self->stash(message=>'Меню сохранено');
    }elsif($amount_hook && $menuid && $menu){#Update menu, router3
        $dbh->do("UPDATE MENU SET NAME=\"$menu\" WHERE MENU.ID=$menuid AND MENU.USERID=$uid");
        for(my $n=0;$n<@recipeid;$n++){#Create SQL UPDATE query for ROUTER3
            if($amount[$n] && $amount[$n]!=0){
                my $status=$dbh->do("UPDATE ROUTER3 SET AMOUNT=$amount[$n] WHERE RECIPEID=(SELECT RECIPES.ID FROM RECIPES WHERE RECIPES.ID=$recipeid[$n] AND RECIPES.USERID=$uid) AND MENUID=(SELECT MENU.ID FROM MENU WHERE MENU.ID=$menuid AND MENU.USERID=$uid)");
                if($status!=1){
                    $dbh->do("INSERT INTO ROUTER3(ID,MENUID,RECIPEID,AMOUNT) VALUES(NULL,$menuid,$recipeid[$n],$amount[$n])");
                }
            }
        }
        $recipes=$dbh->selectall_hashref("SELECT ROUTER3.RECIPEID AS ID,ROUTER3.ID AS ROUTEID,ROUTER3.MENUID AS MENUID,RECIPES.NAME AS RECIPE,ROUTER3.AMOUNT AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON RECIPES.ID=ROUTER3.RECIPEID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
        $self->stash(message=>'Меню сохранено');
    }else{#If new menu,select recipes
        foreach(@recipeid){
            $SQL=$SQL."RECIPES.ID=$_ OR ";
        }
        $recipes=$dbh->selectall_hashref("SELECT RECIPES.ID AS ID,RECIPES.NAME AS RECIPE FROM RECIPES WHERE ($SQL RECIPES.ID=0) AND RECIPES.USERID=$uid",'ID');
    }  
    $self->stash(recipes=>$recipes,
                 menu=>$menu,
                 menuid=>$menuid,
                 addrecipes=>{}
                 );
    $self->render('menu');
};

get '/cooking'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $menus=$dbh->selectall_hashref("SELECT MENU.ID,MENU.NAME AS MENU FROM MENU WHERE MENU.USERID=$uid",'ID');
  $self->stash(menus=>$menus,
	       ingredients=>{});
  $self->render('cooking');
};

get '/cooking/buy/:id'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $menuid=$self->param('id');
  my $menu=$dbh->selectrow_array("SELECT MENU.NAME FROM MENU WHERE MENU.USERID=$uid AND MENU.ID=$menuid");
  my $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,INGREDIENTS.TAG,MEASURE.NAME AS MEASURE,SUM(ROUND(ROUTER3.AMOUNT*(ROUTER1.QUANTITY/RECIPES.CALCULATION))) AS SUM FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid GROUP BY INGREDIENTS.ID",'ID');
  my $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid GROUP BY INGREDIENTS.TAG ORDER BY INGREDIENTS.TAG");
  $self->stash(menu=>$menu,
	       menuid=>$menuid,
	       ingredients=>$ingredients,
	       tags=>$tags,
	       email=>$self->session('name'));
  $self->render('cookingbuy');
};

get '/cooking/print/:action/:id'=>sub{
    my $self=shift;
    return $self->redirect_to('login') unless $self->session('name');
    my $uid=$self->session('uid');
    my $action=$self->stash('action') || '';
    my $menuid=$self->param('id') || 0;
    my $ingredients={};
    my $instructions={};
    my $tags=();
    my $menu=$dbh->selectrow_array("SELECT MENU.NAME FROM MENU WHERE MENU.ID=$menuid AND MENU.USERID=$uid");
    if($action eq 'buy'){
        $ingredients=$dbh->selectall_hashref("SELECT INGREDIENTS.ID,INGREDIENTS.NAME AS INGREDIENT,INGREDIENTS.TAG,MEASURE.NAME AS MEASURE,SUM(ROUND(ROUTER3.AMOUNT*(ROUTER1.QUANTITY/RECIPES.CALCULATION))) AS SUM FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid GROUP BY INGREDIENTS.ID",'ID');
        $tags=$dbh->selectcol_arrayref("SELECT INGREDIENTS.TAG FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid GROUP BY INGREDIENTS.TAG ORDER BY INGREDIENTS.TAG");
    }elsif($action eq 'how'){
        $instructions=$dbh->selectall_hashref("SELECT RECIPES.ID, RECIPES.NAME AS RECIPE,RECIPES.INSTRUCTION,ROUTER3.AMOUNT,ROUND(RECIPES.WEIGHT/RECIPES.CALCULATION*ROUTER3.AMOUNT) AS PORTIONS  FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
        $ingredients=$dbh->selectall_hashref("SELECT ROUTER1.ID,RECIPES.ID AS RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,(ROUND(ROUTER3.AMOUNT*(ROUTER1.QUANTITY/RECIPES.CALCULATION))) AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
    }
    $self->stash(menu=>$menu,
                 action=>$action,
                 ingredients=>$ingredients,
                 tags=>$tags,
                 instructions=>$instructions);
}=>'cookingprint';

get '/cooking/how/:id'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $menuid=$self->param('id');
  my $menu=$dbh->selectrow_array("SELECT MENU.NAME FROM MENU WHERE MENU.USERID=$uid AND MENU.ID=$menuid");
  my $instructions=$dbh->selectall_hashref("SELECT RECIPES.ID, RECIPES.NAME AS RECIPE,RECIPES.INSTRUCTION,ROUTER3.AMOUNT,ROUND(RECIPES.WEIGHT/RECIPES.CALCULATION*ROUTER3.AMOUNT) AS PORTIONS FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
  my $ingredients=$dbh->selectall_hashref("SELECT ROUTER1.ID,RECIPES.ID AS RECIPEID,INGREDIENTS.NAME AS INGREDIENT,MEASURE.NAME AS MEASURE,(ROUND(ROUTER3.AMOUNT*(ROUTER1.QUANTITY/RECIPES.CALCULATION))) AS AMOUNT FROM ROUTER3 LEFT JOIN RECIPES ON ROUTER3.RECIPEID=RECIPES.ID LEFT JOIN ROUTER1 ON RECIPES.ID=ROUTER1.RECIPEID LEFT JOIN INGREDIENTS ON ROUTER1.INGREDIENTID=INGREDIENTS.ID LEFT JOIN MEASURE ON INGREDIENTS.MEASUREID=MEASURE.ID WHERE ROUTER3.MENUID=$menuid AND RECIPES.USERID=$uid",'ID');
  $self->stash(menu=>$menu,
	       menuid=>$menuid,
	       instructions=>$instructions,
	       ingredients=>$ingredients);
  $self->render('cookinghow');
};

get '/cooking/:action/:id'=>sub{
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $action=$self->param('action') || '';
  my $menuid=$self->param('id');
  my $ingredients={};
  if($action eq 'delete'){
    $dbh->do("DELETE FROM MENU WHERE MENU.ID=$menuid AND MENU.USERID=$uid");
    $self->stash(message=>'Меню удалено');
  }
  my $menus=$dbh->selectall_hashref("SELECT MENU.ID,MENU.NAME AS MENU FROM MENU WHERE MENU.USERID=$uid",'ID');
  $self->stash(menus=>$menus);
  $self->render('cooking');
};

post '/cooking'=>sub{
my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $uid=$self->session('uid');
  my $email=$self->param('email') || undef;
  my $menu=$self->param('menu');
  my @ingredient=$self->param('ingredient');
  my @tag=$self->param('tag');
  my @measure=$self->param('measure');
  my @amount=$self->param('amount');
  my $data='';
  my $position=0;
  if($email && $email=~/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/){
	       foreach(my $n=0;$n<@ingredient;$n++){
			      if($amount[$n] && $amount[$n]>0){
					     $position++;
					     $data=$data."$position. $ingredient[$n], $tag[$n] - $amount[$n] $measure[$n]\n";
			      }
	       }
	       $data=$data."\nStoResto желает вам приятного приготовления.\n$subscribe";
	       $self->mail(
	         to      => $email,
	         subject => "$menu, список продуктов",
	         data    => $data,
	       );
    $self->stash(message=>'Список продуктов отправлен на почту');
  }
  my $menus=$dbh->selectall_hashref("SELECT MENU.ID,MENU.NAME AS MENU FROM MENU WHERE MENU.USERID=$uid",'ID');
  $self->stash(menus=>$menus,
	       ingredients=>{});
  $self->render('cooking');
};

get '/login'=>sub{
  my $self=shift;
  my $email=$self->param('email') || '';
  my $pass=$self->param('pass') || '';
  my $check=$dbh->selectrow_array("SELECT ID FROM USERS WHERE EMAIL='$email' AND PASS='$pass'");
  return $self->render unless $check;
  $self->session(name=>$email,uid=>$check);
  $self->flash(message => 'Thanks for logging in!');
  $self->redirect_to('kitchen');
}=>'login';

get '/logout'=>sub{
  my $self=shift;
  $self->session(expires=>1);
  $self->redirect_to('index');
}=>'logout';

get '/register'=>sub{
  my $self=shift;
  my $uid=$self->session('uid');
  my $email=$self->param('email') || '';
  my $activation=$self->param('activation') || undef;
  my $message=undef;
  my $data='';
  if(!$activation && $email=~/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/){
        $activation=$dbh->selectrow_array("SELECT PASS FROM USERS WHERE EMAIL='$email'");
        if(!$activation){
            for (my $i=0;$i<=10;$i++){
                $activation=$activation.int(rand($i));
            }
            #Generate activation code
            $data="Мы рады приветствовать вас в StoResto.\n
Для завершения регистрации откройте ссылку http://www.storesto.ru/register?&activation=$activation,
если ссылка не открывается, скопируйте и вставьте в броузере.
Ваш пароль (секретное слово):\t$activation\n
$subscribe";
            $dbh->do("INSERT INTO INVITE(ID,EMAIL,CODE,QUERY) VALUES (NULL,\"$email\",\"$activation\",NOW())");
            $self->mail(to=>$email,
            	subject=>'Приглашение в StoResto',
            	data=>$data);
            $message='Приглашение отправлено на электронную почту.';
        }else{
            $message="Пользователь $email уже зарегистрирован. Укажите другой email";
        }
  }elsif($activation){
    $email=$dbh->selectrow_array("SELECT EMAIL FROM INVITE WHERE CODE=\"$activation\"") || undef;
    if($email){
        $dbh->do("INSERT INTO USERS(ID,EMAIL,PASS) VALUES(NULL,\"$email\",\"$activation\")") || $dbh->errstr;
        $uid=$dbh->last_insert_id('','','USERS','ID');
        $dbh->do("DELETE FROM INVITE WHERE CODE=\"$activation\"") || $dbh->errstr;
        $self->session(name=>$email,uid=>$uid);
        $message='Все отлично! Вы в StoResto. Для начала, неплохо бы заполнить кладовую продуктами :)';
    }else{
        $message='Код активации неверен.';
    }
  }
  $self->stash(message=>$message,
               uid=>$uid);
}=>'register';

get '/lost_password'=>sub{
    my $self=shift;
    my $email=$self->param('email') || '';
    my $pass='';
    my $message='';
    if($email=~/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/){
        $pass=$dbh->selectrow_array("SELECT PASS FROM USERS WHERE EMAIL=\"$email\"");
        if($pass){
            $self->mail(to=>$email,
                        subject=>'Восстановление пароля в StoResto',
                        data=>"Вы или возможно кто-то другой попытались восстановить пароль.
Ваш пароль: $pass
Если вы не восстанавливали пароль, пожалуйста оставьте это письмо без внимания.
$subscribe");
            $message='Письмо с инструкцией отправлено на электронный адрес.';
        }else{
            $message='Указанный электронный адрес не зарегистрирован';
        }
    }
    $self->stash(message=>$message,
               uid=>undef);
}=>'lost_password';

get '/' => sub{
    my $self=shift;
    my $recipes='';#$dbh->selectall_hashref('SELECT RECIPES.ID,RECIPES.NAME AS RECIPE,RECIPES.CALCULATION,LEFT(RECIPES.INSTRUCTION,140) AS INSTRUCTION FROM RECIPES ORDER BY ID DESC LIMIT 10','ID');
    my $uid=$self->session('uid');
    $self->stash(recipes=>$recipes,uid=>$uid);
    $self->render;
}=>'index';

app->start;